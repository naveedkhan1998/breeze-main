name: Code Quality Checks

on:
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-checks:
    name: Backend Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "backend/**/pyproject.toml"

      - name: Install dependencies
        working-directory: ./backend
        run: |
          uv sync --dev --frozen

      - name: Run Black (formatting check)
        working-directory: ./backend
        run: |
          uvx black --check --diff .

      - name: Run Ruff (linting)
        working-directory: ./backend
        run: |
          uvx ruff check --output-format=github .

      - name: Run Ruff (formatting check)
        working-directory: ./backend
        run: |
          uvx ruff format --check --diff .

      - name: Run Tests
        working-directory: ./backend
        run: |
          uv run pytest --verbose --tb=short

      - name: Backend Quality Summary
        if: always()
        run: |
          echo "### Backend Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "- Black formatting: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Ruff linting: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  frontend-checks:
    name: Frontend Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run Prettier (formatting check)
        working-directory: ./frontend
        run: |
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}" --ignore-path .gitignore

      - name: Run ESLint
        working-directory: ./frontend
        run: |
          npm run lint

      - name: Type check
        working-directory: ./frontend
        run: |
          npm run type-check
        continue-on-error: true

      - name: Run Tests
        working-directory: ./frontend
        run: |
          npm run test:run

      - name: Frontend Quality Summary
        if: always()
        run: |
          echo "### Frontend Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "- Prettier formatting: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type check: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-checks, frontend-checks]
    if: always()

    steps:
      - name: Check Quality Results
        run: |
          if [[ "${{ needs.backend-checks.result }}" == "failure" || "${{ needs.frontend-checks.result }}" == "failure" ]]; then
            echo "❌ Code quality checks failed"
            echo "### Quality Gate: FAILED" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All code quality checks passed"
            echo "### Quality Gate: PASSED" >> $GITHUB_STEP_SUMMARY
          fi

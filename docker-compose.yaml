version: "3.8"

services:
  postgres:
    image: postgres:latest
    container_name: breeze-postgres
    env_file:
      - ./.envs/env.dev
    volumes:
      - ./postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: breeze-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: nginx
      dockerfile: Dockerfile.dev
    restart: always
    container_name: breeze-nginx
    ports:
      - "8000:80"
    depends_on:
      postgres:
        condition: service_healthy
      frontend:
        condition: service_started
      backend:
        condition: service_started

  backend:
    build:
      context: backend/
      dockerfile: Dockerfile.dev
    container_name: breeze-backend
    env_file:
      - ./.envs/env.dev
    volumes:
      - ./backend/:/app/
    entrypoint: |
      bash -c "
      python3 manage.py wait_for_db &&
      python3 manage.py migrate --noinput --skip-checks &&
      python3 manage.py initadmin &&
      celery -A main beat --detach &&
      python3 manage.py process_data &
      python3 manage.py runserver 0.0.0.0:8000
      "
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: frontend/
      dockerfile: Dockerfile.dev
    container_name: breeze-frontend
    environment:
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend/src/:/usr/app/src/
      - ./frontend/public/:/usr/app/public/
      - ./frontend/package.json:/usr/app/package.json
      - ./frontend/package-lock.json:/usr/app/package-lock.json

  celery-worker:
    build:
      context: backend/
      dockerfile: Dockerfile.dev
    container_name: breeze-celery-worker
    env_file:
      - ./.envs/env.dev
    depends_on:
      backend:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/:/app/
    entrypoint: |
      bash -c "
      rm -f /var/run/celery/w1.pid &&
      rm -f /var/run/celery/w2.pid &&
      rm -f /var/run/celery/w3.pid &&
      rm -f /var/run/celery/beat.pid &&
      celery -A main purge --force &&
      celery multi start w1 w2 w3 -A main --logfile=/var/log/celery/%n.log --loglevel=ERROR &&
      tail -f /var/log/celery/w*.log"
    restart: always

  # celery-beat:
  #   build:
  #     context: backend/
  #     dockerfile: Dockerfile.dev
  #   container_name: breeze-celery-beat
  #   env_file:
  #     - ./.envs/env.dev
  #   depends_on:
  #     backend:
  #       condition: service_started
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./backend/:/app/
  #   entrypoint: celery -A main beat --loglevel=INFO
  #   restart: always

volumes:
  redis-data:
